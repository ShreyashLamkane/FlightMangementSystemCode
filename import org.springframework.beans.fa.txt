@RestController
public class BookingController {
    @Autowired
    private BookingService bookingService;

    @PostMapping("/bookings")
    public ResponseEntity<BookingResponse> bookFlight(@RequestBody BookingRequest request) {
        // Logic to book the flight
        BookingResponse response = bookingService.bookFlight(request);
        return ResponseEntity.ok(response);
    }

    @PutMapping("/bookings/{bookingId}/passengers")
    public ResponseEntity<String> updateBookingWithPassenger(@PathVariable String bookingId, @RequestBody Passenger passenger) {
        // Logic to update booking with passenger information
        bookingService.updateBookingWithPassenger(bookingId, passenger);
        return ResponseEntity.ok("Passenger information updated successfully");
    }
}
@Service
public class BookingService {
    @Autowired
    private BookingRepository bookingRepository;

    public BookingResponse bookFlight(BookingRequest request) {
        // Logic to book the flight
    }

    public void updateBookingWithPassenger(String bookingId, Passenger passenger) {
        // Logic to update booking with passenger information
        Booking booking = bookingRepository.findById(bookingId).orElseThrow(() -> new RuntimeException("Booking not found"));
        booking.addPassenger(passenger); // Assuming addPassenger method exists in Booking class
        bookingRepository.save(booking);
    }
}


@RestController
public class SeatAllocationController {
    @Autowired
    private SeatAllocationService seatAllocationService;

    @PostMapping("/checkin/{bookingId}")
    public ResponseEntity<String> webCheckIn(@PathVariable String bookingId) {
        // Logic to perform seat allocation and update the seat allocation database
        seatAllocationService.performWebCheckInAndUpdateSeatAllocation(bookingId);
        return ResponseEntity.ok("Seats allocated successfully");
    }
}


@Service
public class SeatAllocationService {
    @Autowired
    private SeatAllocationRepository seatAllocationRepository;

    @Autowired
    private BookingServiceClient bookingServiceClient;

    public void performWebCheckInAndUpdateSeatAllocation(String bookingId) {
        // Retrieve booking details from the booking microservice
        BookingDetails bookingDetails = bookingServiceClient.getBookingDetails(bookingId);
        
        // Perform seat allocation logic based on booking details
        // Update seat allocation database
        SeatAllocation seatAllocation = new SeatAllocation(/* Seat allocation details */);
        seatAllocationRepository.save(seatAllocation);
    }
}
